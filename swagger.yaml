consumes:
- application/json
definitions:
  Event:
    properties:
      description:
        type: string
        x-go-name: Description
      event_id:
        type: string
        x-go-name: EventID
      host_time:
        format: int64
        type: integer
        x-go-name: HostTime
      location:
        $ref: '#/definitions/GeographyPoints'
      name:
        type: string
        x-go-name: Name
      start_time:
        format: int64
        type: integer
        x-go-name: StartTime
      trending_index:
        format: int64
        type: integer
        x-go-name: TrendingIndex
      type_of_event:
        format: int64
        type: integer
        x-go-name: TypeOfEvent
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/models
  EventAttendeeBridge:
    properties:
      event:
        $ref: '#/definitions/Event'
      generated_id:
        type: string
        x-go-name: GeneratedID
      volunteer:
        $ref: '#/definitions/VolData'
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/models
  EventHostBridge:
    properties:
      event:
        $ref: '#/definitions/Event'
      generated_id:
        type: string
        x-go-name: GeneratedID
      organisation:
        $ref: '#/definitions/OrgData'
      volunteer:
        $ref: '#/definitions/VolData'
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/models
  Followers:
    properties:
      generated_id:
        type: string
        x-go-name: GeneratedID
      organisation_id:
        type: string
        x-go-name: OrganisationID
      volunteer:
        $ref: '#/definitions/VolData'
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/models
  GeographyPoints:
    description: |-
      GeographyPoints is a struct that holds longitude, latitude of a location and optionally radius
      Radius can be specified to initiate a search of other points in radius from specified coordinates
    properties:
      latitude:
        type: string
        x-go-name: Latitude
      longitude:
        type: string
        x-go-name: Longitude
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/database/querybuilder/types
  JWTRefreshReq:
    description: JWTRefreshReq contains Token for refresh
    properties:
      token:
        description: Token provided after successful login
        type: string
        x-go-name: Token
    required:
    - token
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/authentication
  LoginReq:
    description: LoginReq contains Login details
    properties:
      password:
        description: Password of user
        type: string
        x-go-name: Password
      username:
        description: Username of user
        type: string
        x-go-name: Username
    required:
    - username
    - password
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/authentication
  OrgData:
    description: OrgData is a model to store data about an organisation
    properties:
      achievements:
        type: string
        x-go-name: Achievements
      contact_email:
        type: string
        x-go-name: ContactEmail
      contact_phone:
        type: string
        x-go-name: ContactPhone
      desc:
        type: string
        x-go-name: Desc
      display_name:
        type: string
        x-go-name: DisplayName
      follower_count:
        format: uint64
        type: integer
        x-go-name: Followers
      location:
        $ref: '#/definitions/GeographyPoints'
      organisation_id:
        type: string
        x-go-name: OrganisationID
      owner:
        type: string
        x-go-name: Owner
      registration_no:
        type: string
        x-go-name: RegistrationNo
      type_of_org:
        format: int64
        type: integer
        x-go-name: TypeOfOrg
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/models
  VolData:
    properties:
      bio:
        type: string
        x-go-name: Bio
      contact_email:
        type: string
        x-go-name: ContactEmail
      contact_phone:
        type: string
        x-go-name: ContactPhone
      display_name:
        type: string
        x-go-name: DisplayName
      joined:
        format: int64
        type: integer
        x-go-name: Joined
      volunteer_id:
        type: string
        x-go-name: VolunteerID
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/models
  eventPostReq:
    properties:
      category:
        description: Type of category [Refer to event_category]
        format: int64
        type: integer
        x-go-name: Category
      description:
        description: Name of event
        type: string
        x-go-name: Description
      location:
        $ref: '#/definitions/GeographyPoints'
      name:
        description: Name of event
        type: string
        x-go-name: Name
      organisation_id:
        description: ID of host of event (org)
        type: string
        x-go-name: OrganisationID
      start_time:
        description: Start time of event [unix timestamp]
        format: int64
        type: integer
        x-go-name: StartTime
      type_of_event:
        description: Type of category [0 - Virtual, 1 - Physical]
        format: int64
        type: integer
        x-go-name: TypeOfEvent
      volunteer_id:
        description: ID of host of event (user)
        type: string
        x-go-name: VolunteerID
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/api
  eventShort:
    properties:
      event_id:
        type: string
        x-go-name: EventID
      location:
        $ref: '#/definitions/GeographyPoints'
      name:
        type: string
        x-go-name: Name
      trending_index:
        format: int64
        type: integer
        x-go-name: TrendingIndex
      type_of_event:
        format: int64
        type: integer
        x-go-name: TypeOfEvent
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/api
  followerReq:
    properties:
      organisation_id:
        description: ID of organisation who is being followed
        type: string
        x-go-name: OrganisationID
      volunteer_id:
        description: ID of volunteer who is following
        type: string
        x-go-name: VolunteerID
    required:
    - organisation_id
    - volunteer_id
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/api
  orgCreReq:
    description: Signup details for Organisation
    properties:
      email:
        description: Email of Organisation
        type: string
        x-go-name: Email
      location:
        $ref: '#/definitions/GeographyPoints'
      org_name:
        description: Name of Organisation
        type: string
        x-go-name: OrgName
      org_type:
        description: Type of Organisation
        format: int64
        type: string
        x-go-name: TypeOfOrg
      owner:
        description: Owner of Organisation
        type: string
        x-go-name: Owner
      password:
        description: Password of user
        type: string
        x-go-name: Password
      reg_no:
        description: Registration Number of organisation according to ngodarpan if
          applicable
        type: string
        x-go-name: RegistrationNo
    required:
    - email
    - password
    - org_name
    - org_type
    - owner
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/api
  orgDataShort:
    properties:
      display_name:
        type: string
        x-go-name: DisplayName
      follower_count:
        format: uint64
        type: integer
        x-go-name: Followers
      location:
        $ref: '#/definitions/GeographyPoints'
      organisation_id:
        type: string
        x-go-name: OrganisationID
      type_of_org:
        format: int64
        type: integer
        x-go-name: TypeOfOrg
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/api
  volCreReq:
    description: Signup details for Volunteer
    properties:
      email:
        description: Email of user
        type: string
        x-go-name: Email
      first_name:
        description: First name of user
        type: string
        x-go-name: FirstName
      last_name:
        description: Last name of user
        type: string
        x-go-name: LastName
      password:
        description: Password of user
        type: string
        x-go-name: Password
    required:
    - first_name
    - last_name
    - email
    - password
    type: object
    x-go-package: github.com/Sayitsocial/Sayitsocial_go/pkg/routes/api
host: dev.sayitsocial.in:6969
info:
  description: Documentation of SayItSocialAPI.
  title: classification SayItSocial.
  version: 1.0.0
paths:
  /api/event/attendee:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        This will show attendees of an event.
        Atleast one param is required
      operationId: getEventAttendee
      parameters:
      - description: Generated ID
        in: query
        name: generated_id
        type: string
        x-go-name: GeneratedID
      - description: ID of host of event (user)
        in: query
        name: volunteer_id
        type: string
        x-go-name: VolunteerID
      - description: ID of event
        in: query
        name: event_id
        type: string
        x-go-name: EventID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/eventAttendeeResponse'
      schemes:
      - http
      security:
      - JWTAuth:
        - '[]'
      summary: Get attendees of event
      tags:
      - event
  /api/event/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This will show create a new event.
      operationId: createEvent
      parameters:
      - $ref: '#/definitions/eventPostReq'
        in: query
        name: EventsPostModel
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/successResponse'
      schemes:
      - http
      summary: Create a new event
      tags:
      - event
  /api/event/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |2-

        This will show details of event
        Atleast one param is required
      operationId: getEvent
      parameters:
      - description: Event id of event
        in: query
        name: event_id
        type: string
        x-go-name: EventID
      - description: Name of event
        in: query
        name: name
        type: string
        x-go-name: Name
      - description: Start time of event [unix timestamp]
        format: int64
        in: query
        name: start_time
        type: integer
        x-go-name: StartTime
      - description: Host time of event [unix timestamp]
        format: int64
        in: query
        name: host_time
        type: integer
        x-go-name: HostTime
      - description: Type of category [Refer to event_category]
        format: int64
        in: query
        name: category
        type: integer
        x-go-name: Category
      - description: Type of event [0 - Virtual, 1 - Physical]
        format: int64
        in: query
        name: type_of_event
        type: integer
        x-go-name: TypeOfEvent
      - $ref: '#/definitions/GeographyPoints'
        description: Location in [Longitude, Latitude, Radius]
        in: query
        name: location
        x-go-name: Location
      - description: Sort results by [trending_index/ST_XMin(location)]
        in: query
        name: sortby
        type: string
        x-go-name: SortBy
      - description: Pagination
        format: int64
        in: query
        name: page
        type: integer
        x-go-name: Page
      - description: Get short results
        in: query
        name: short
        type: boolean
        x-go-name: Short
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/eventResponse'
        "201":
          $ref: '#/responses/eventShortResponse'
      schemes:
      - http
      summary: Get details of event
      tags:
      - event
  /api/event/get/all:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |2-

        This will show details of event
        Atleast one param is required
      operationId: getEventAll
      parameters:
      - description: Sort results by [trending_index/ST_XMin(location)]
        in: query
        name: sortby
        type: string
        x-go-name: SortBy
      - description: Pagination
        format: int64
        in: query
        name: page
        type: integer
        x-go-name: Page
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/eventResponse'
        "201":
          $ref: '#/responses/eventShortResponse'
      schemes:
      - http
      summary: Get all events
      tags:
      - event
  /api/event/host:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        This will show hosts of an event.
        Atleast one param is required
      operationId: getEventHost
      parameters:
      - description: Generated ID
        in: query
        name: generated_id
        type: string
        x-go-name: GeneratedID
      - description: ID of host of event (org)
        in: query
        name: organisation_id
        type: string
        x-go-name: OrganisationID
      - description: ID of host of event (user)
        in: query
        name: volunteer_id
        type: string
        x-go-name: VolunteerID
      - description: ID of event
        in: query
        name: event_id
        type: string
        x-go-name: EventID
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/eventHostResponse'
      schemes:
      - http
      summary: Get hosts of event
      tags:
      - event
  /api/followers/add:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Add a follower to certain organisation
      operationId: addFollower
      parameters:
      - $ref: '#/definitions/followerReq'
        in: query
        name: Followers
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/successResponse'
      schemes:
      - http
      tags:
      - followers
  /api/followers/remove:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Remove a follower from certain organisation
      operationId: delFollower
      parameters:
      - $ref: '#/definitions/followerReq'
        in: query
        name: Followers
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/successResponse'
      schemes:
      - http
      tags:
      - followers
  /api/org/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This will show create a new organisation.
      operationId: createOrganisation
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/successResponse'
      schemes:
      - http
      summary: Create a new organisation
      tags:
      - organisation
  /api/org/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        This will details of an organisation.
        Atleast one param is required
      operationId: getOrganisation
      parameters:
      - description: Organisation ID
        in: query
        name: organisation_id
        type: string
        x-go-name: OrganisationID
      - description: Name of organisation
        in: query
        name: display_name
        type: string
        x-go-name: DisplayName
      - description: Owner of organisation
        in: query
        name: owner
        type: string
        x-go-name: Owner
      - description: Type of organisation
        format: int64
        in: query
        name: type_of_org
        type: integer
        x-go-name: TypeOfOrg
      - $ref: '#/definitions/GeographyPoints'
        description: Location in [Longitude, Latitude, Radius]
        in: query
        name: location
        x-go-name: Location
      - description: Sort results by [followers]
        in: query
        name: sortby
        type: string
        x-go-name: SortBy
      - description: Get short results
        in: query
        name: short
        type: boolean
        x-go-name: Short
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/orgResponse'
        "201":
          $ref: '#/responses/orgResponseShort'
      schemes:
      - http
      summary: Get details of an organisation
      tags:
      - organisation
  /api/vol/create:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: This will create a new volunteer.
      operationId: createVolunteer
      parameters:
      - $ref: '#/definitions/volCreReq'
        in: query
        name: Volunteer
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/successResponse'
      schemes:
      - http
      summary: Create a new volunteer
      tags:
      - volunteer
  /api/vol/get:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        This will show details of a volunteer.
        Atleast one param is required
      operationId: getVolunteer
      parameters:
      - description: Organisation ID
        in: query
        name: organisation_id
        type: string
        x-go-name: VolunteerID
      - description: Name of organisation
        in: query
        name: display_name
        type: string
        x-go-name: DisplayName
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/volResponse'
      schemes:
      - http
      summary: Get details of a volunteer
      tags:
      - volunteer
  /auth/jwt-login:
    post:
      consumes:
      - application/json
      description: Login to existing account
      operationId: JWTLogin
      parameters:
      - in: body
        name: Login
        schema:
          $ref: '#/definitions/LoginReq'
      responses:
        "200":
          $ref: '#/responses/JWTLoginResp'
        "401":
          $ref: '#/responses/unauthorizedError'
      schemes:
      - http
      tags:
      - auth
  /auth/jwt-refresh:
    post:
      consumes:
      - application/json
      description: Login to existing account
      operationId: JWTRefresh
      parameters:
      - in: body
        name: JWT
        schema:
          $ref: '#/definitions/JWTRefreshReq'
      responses:
        "200":
          $ref: '#/responses/JWTLoginResp'
        "401":
          $ref: '#/responses/unauthorizedError'
      schemes:
      - http
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to existing account
      operationId: login
      parameters:
      - in: body
        name: Login
        schema:
          $ref: '#/definitions/LoginReq'
      responses:
        "200":
          $ref: '#/responses/successResponse'
        "401":
          $ref: '#/responses/unauthorizedError'
      schemes:
      - http
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout from existing account
      operationId: logout
      responses:
        "200":
          $ref: '#/responses/successResponse'
      schemes:
      - http
      tags:
      - auth
produces:
- application/json
responses:
  JWTLoginResp:
    description: JWTResp response for JWT logins
    headers:
      token:
        description: Token provided after successful login
        type: string
  errResponse:
    description: ErrorResponse ...
  eventAttendeeResponse:
    description: ""
    headers:
      eventAttendee:
        description: 'in: query'
    schema:
      $ref: '#/definitions/EventAttendeeBridge'
  eventHostResponse:
    description: ""
    headers:
      eventHost:
        description: 'in: query'
    schema:
      $ref: '#/definitions/EventHostBridge'
  eventResponse:
    description: ""
    headers:
      event:
        description: 'in: query'
    schema:
      $ref: '#/definitions/Event'
  eventShortResponse:
    description: |-
      This response will be returned if "short" is true
      Status code will be 200
    headers:
      event:
        description: 'in: query'
    schema:
      $ref: '#/definitions/eventShort'
  orgResponse:
    description: ""
    headers:
      org: {}
    schema:
      $ref: '#/definitions/OrgData'
  orgResponseShort:
    description: |-
      This response will be returned if "short" is true
      Status code will be 200
    headers:
      org: {}
    schema:
      $ref: '#/definitions/orgDataShort'
  successResponse:
    description: SuccessResponse ...
  volResponse:
    description: ""
    headers:
      vol: {}
    schema:
      $ref: '#/definitions/VolData'
schemes:
- http
securityDefinitions:
  JWTAuth:
    description: Get token from /auth/jwt-login
    in: header
    name: Authorization
    type: apiKey
  cookieAuth:
    description: Doesnt work from swagger, head over to /login
    in: cookie
    name: SESSIONID
    type: apiKey
swagger: "2.0"
